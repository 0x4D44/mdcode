use mdcode::*;
use std::path::Path;

#[test]
fn test_detect_file_type_all_arms() {
    let cases = vec![
        ("a.c", Some("C")),
        ("a.cpp", Some("C++")),
        ("a.cc", Some("C++")),
        ("a.cxx", Some("C++")),
        ("a.h", Some("C/C++ Header")),
        ("a.hpp", Some("C++ Header")),
        ("a.hh", Some("C++ Header")),
        ("a.hxx", Some("C++ Header")),
        ("a.java", Some("Java")),
        ("a.py", Some("Python")),
        ("a.rb", Some("Ruby")),
        ("a.cs", Some("C#")),
        ("a.go", Some("Go")),
        ("a.php", Some("PHP")),
        ("a.rs", Some("Rust")),
        ("a.swift", Some("Swift")),
        ("a.kt", Some("Kotlin")),
        ("a.kts", Some("Kotlin")),
        ("a.scala", Some("Scala")),
        ("a.js", Some("JavaScript")),
        ("a.jsx", Some("JavaScript")),
        ("a.ts", Some("TypeScript")),
        ("a.tsx", Some("TypeScript")),
        ("a.sh", Some("Shell Script")),
        ("a.bash", Some("Shell Script")),
        ("a.zsh", Some("Shell Script")),
        ("a.bat", Some("Batch Script")),
        ("a.ps1", Some("PowerShell")),
        ("a.r", Some("R")),
        ("a.jl", Some("Julia")),
        ("a.mm", Some("Objective-C++")),
        ("a.cmake", Some("CMake")),
        ("a.proto", Some("Protobuf")),
        ("a.graphql", Some("GraphQL")),
        ("a.gql", Some("GraphQL")),
        ("a.thrift", Some("Thrift")),
        ("a.html", Some("HTML")),
        ("a.htm", Some("HTML")),
        ("a.css", Some("CSS")),
        ("a.scss", Some("CSS")),
        ("a.sass", Some("CSS")),
        ("a.less", Some("CSS")),
        ("a.xml", Some("XML")),
        ("a.json", Some("JSON")),
        ("a.yml", Some("YAML")),
        ("a.yaml", Some("YAML")),
        ("a.toml", Some("TOML")),
        ("Cargo.lock", Some("Lockfile")),
        ("a.md", Some("Documentation")),
        ("a.txt", Some("Documentation")),
        ("a.rst", Some("Documentation")),
        ("a.adoc", Some("Documentation")),
        ("nb.ipynb", Some("Notebook")),
        ("a.ini", Some("Configuration")),
        ("a.cfg", Some("Configuration")),
        ("a.conf", Some("Configuration")),
        ("a.sln", Some("Solution File")),
        ("a.csproj", Some("C# Project File")),
        ("a.pom", Some("Maven Project File")),
        ("a.gradle", Some("Gradle Build File")),
        ("setup.iss", Some("Installer Script")),
        ("schema.sql", Some("SQL")),
        ("i.jpg", Some("Image")),
        ("i.jpeg", Some("Image")),
        ("i.png", Some("Image")),
        ("i.bmp", Some("Image")),
        ("i.gif", Some("Image")),
        ("i.tiff", Some("Image")),
        ("i.webp", Some("Image")),
        ("v.svg", Some("Vector Image")),
        ("icon.ico", Some("Icon")),
        ("cursor.cur", Some("Cursor")),
        ("dialog.dlg", Some("Dialog File")),
        ("s.wav", Some("Audio")),
        ("s.mp3", Some("Audio")),
        ("s.flac", Some("Audio")),
        ("s.aac", Some("Audio")),
        ("s.m4a", Some("Audio")),
        ("s.ogg", Some("Audio")),
        ("s.opus", Some("Audio")),
        ("s.aiff", Some("Audio")),
        ("s.aif", Some("Audio")),
        ("s.wma", Some("Audio")),
        ("s.mid", Some("Audio")),
        ("s.midi", Some("Audio")),
        ("f.ttf", Some("Font")),
        ("f.otf", Some("Font")),
        ("f.woff", Some("Font")),
        ("f.woff2", Some("Font")),
    ];
    for (name, expected) in cases {
        assert_eq!(detect_file_type(Path::new(name)), expected, "{}", name);
    }
}
